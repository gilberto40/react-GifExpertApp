{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cates","type","value","onChange","target","getGifs","categories","a","url","encodeURI","fetch","resp","json","data","gifs","map","image","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","img","useFetchGifs","key","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"qMAoCeA,EAjCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEHC,mBAAS,IAFN,mBAEhCC,EAFgC,KAEpBC,EAFoB,KAkBvC,OACI,0BAAMC,SAXW,SAAAC,GACjBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC/BR,GAAe,SAAAS,GAAK,OAAMP,GAAN,mBAAqBO,OACzCN,EAAc,OAOV,2BACIO,KAAK,OACLC,MAAQT,EACRU,SAnBa,SAAAP,GACrBF,EAAcE,EAAEQ,OAAOF,Y,uBCRlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAWH,GAD/C,+DAEAI,MAAOF,GAFP,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAD,YAClB,CACIC,GAAID,EAAMC,GACVC,MAAOF,EAAME,MACbV,IAAG,UAAEQ,EAAMG,cAAR,aAAE,EAAcC,iBAAiBZ,QARzB,kBAYZM,GAZY,4CAAH,sDCEPO,EAAc,SAAC,GAAwB,IAAtBJ,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAErC,OADAc,QAAQC,IAAKN,EAAIC,EAAOV,GAEpB,yBAAKgB,UAAU,0CACX,yBAAKC,IAAKjB,EAAMkB,IAAMR,IACtB,+BAAMA,EAAN,OCHCS,EAAU,SAAC,GAAsB,IAAnBrB,EAAkB,EAAlBA,WAAkB,ECDjB,SAAEA,GAAiB,IAAD,EAChBd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAH6B,mBACnCC,EADmC,KAC5BC,EAD4B,KAgB1C,OAVAC,qBAAU,WACN1B,EAASC,GACR0B,MAAM,SAAAC,GACHH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAGlB,CAAEtB,IAEEuB,EDbwBK,CAAc5B,GAAtCsB,EAFkC,EAElCA,QAAcT,EAFoB,EAEzBN,KAEhB,OACI,oCACI,wBAAIW,UAAU,qCAAd,KAAsDlB,EAAtD,KACEsB,GAAY,uBAAGJ,UAAU,oCAAb,gBACd,yBAAKA,UAAU,aAEPL,EAAOJ,KAAK,SAAAkB,GAAG,OACX,kBAAC,EAAD,eACAE,IAAMF,EAAIhB,IACLgB,UEWdG,EAxBM,WAAO,IAAD,EAEa5C,mBAAS,CAAE,gBAFxB,mBAEhBc,EAFgB,KAEJf,EAFI,KAIvB,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEA,4BAEQe,EAAWS,KAAK,SAAAT,GAAU,OACtB,kBAAC,EAAD,CACA6B,IAAM7B,EACNA,WAAaA,U,MCZrC+B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.6c32e26e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ( {setCategories} ) => {\n\n    const [inputValue, setinputValue] = useState('');\n\n    const handleInputValue = e => {\n        setinputValue(e.target.value);\n    };\n\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        if (inputValue.trim().length > 2){\n        setCategories( cates => [ inputValue, ...cates]);\n        setinputValue('');\n        }\n        \n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input\n                type=\"text\"\n                value={ inputValue }\n                onChange={ handleInputValue }\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired,\n}\n\nexport default AddCategory;\n","export const getGifs = async( categories ) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( categories ) }&limit=10&api_key=eM3PguG977kPqUNNOw9IKXQuFeVuA3wg`;\n    const resp = await fetch( url );\n    const { data } = await resp.json();\n    const gifs = data.map((image) => (\n        {\n            id: image.id,\n            title: image.title,\n            url: image.images?.downsized_medium.url,\n\n        })\n    )\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ( {id, title, url} ) => {\n    console.log( id, title, url )\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url } alt={ title }></img>\n            <p> { title } </p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ( { categories } ) => {\n    \n    const {loading, data:images} = useFetchGifs( categories);\n \n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\">  { categories } </h3>\n            { loading &&  <p className=\"animate__animated animate__flash\">'Loading...'</p>}\n            <div className=\"card-grid\">\n                { \n                    images.map( img  => \n                        <GifGridItem \n                        key={ img.id }\n                        { ...img }\n                        />\n                    )\n                }\n            </div>    \n        </>\n    )\n}\n","import { useState, useEffect } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = ( categories ) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true \n    });\n\n    useEffect(() => {\n        getGifs( categories )\n        .then( img => {\n            setState({\n                data: img,\n                loading: false\n            })\n        })\n    }, [ categories ])\n\n    return state; \n}\n","import React, { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n    const [categories, setCategories] = useState([ 'Dragon Ball' ]);\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setCategories }/>\n            <hr/>\n            {/* <button onClick={ handleAdd }>boton</button> */}\n            <ol>\n                {\n                    categories.map( categories => \n                        <GifGrid \n                        key={ categories }\n                        categories={ categories }\n                        />\n                    )\n                }\n            </ol>\n        </>\n    )\n};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}